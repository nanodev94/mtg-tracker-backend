import chalk from 'chalk'
import cors from 'cors'
import dotenv from 'dotenv'
import type { Express } from 'express'
import express, { json } from 'express'
import fs from 'fs'
import helmet from 'helmet'
import https from 'https'
import log4js from 'log4js'
import morgan from 'morgan'
import { serve } from 'swagger-ui-express'

import './paths'

import { ENABLED, ENVIRONMENTS, envVars } from './config/env'
import ErrorMiddleware from './middlewares/error.middleware'
import NotFoundMiddleware from './middlewares/notFound.middleware'
import SwaggerMiddleware from './middlewares/swagger.middleware'
import { RegisterRoutes } from './tsoa/routes'
import { dbCheckConnection } from './utils/db'
import { ALLOWED_ORIGINS } from './constants'

// Load ENVs and validation
dotenv.config()
envVars.parse(process.env)

const { BASE_URL, NODE_ENV, PORT, HTTPS_MODE } = process.env

const app: Express = express()

// Configs
app.use(helmet())
app.use(cors({ origin: ALLOWED_ORIGINS }))
app.use(json({ limit: '50mb' }))

// Loggers
app.use(morgan('tiny'))
log4js.configure('./log4js.json')
app.use(log4js.connectLogger(log4js.getLogger('http'), { level: 'auto' }))

// Swagger
if (NODE_ENV === ENVIRONMENTS.development) {
  app.use(`${BASE_URL}/docs`, serve, SwaggerMiddleware)
}

// Autogenerated via Tsoa
RegisterRoutes(app)

// Check DB connection
dbCheckConnection()

// Errors handlers
app.use(NotFoundMiddleware)
app.use(ErrorMiddleware)

// RUN SERVER
if (HTTPS_MODE === ENABLED.ON) {
  // With HTTPS
  const credentials = {
    key: fs.readFileSync('ssl/localhost-key.pem'),
    cert: fs.readFileSync('ssl/localhost.pem'),
  }

  const server = https.createServer(credentials, app)

  server.listen(PORT, () => {
    console.log(
      chalk.blueBright(`[server]: ðŸš€ Server is running at https://localhost:${PORT}${BASE_URL}`)
    )
  })
} else {
  // With HTTP
  app.listen(PORT, () => {
    console.log(
      chalk.blueBright(`[server]: ðŸš€ Server is running at http://localhost:${PORT}${BASE_URL}`)
    )
  })
}
